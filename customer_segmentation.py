# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZ5zDJhjWHRiSUp1Aq5KDvX2PDjlzll_
"""



"""Importing the dependencies"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection and Analysis"""

# loading the data from csv file to a pandas dataframe
customer_data = pd.read_csv('/content/Mall_Customers.csv')

# first 5 rows of the dataframe
customer_data.head()

# finding the number of rows and columns
customer_data.shape

# getting some informations about the dataset
customer_data.info()

# checking the missing values
customer_data.isnull().sum()

"""Chossing the Annual Income Column & Spending Score Column"""

X = customer_data.iloc[:,[3,4]].values
print(X)

"""Choosing the number of clusters

WCSS ----> Within Clusters Sum of Squares
"""

# finding wcss values for different number of clusters
WCSS = []
for i in range(1, 11):
  kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
  kmeans.fit(X)
  WCSS.append(kmeans.inertia_)

# plot an elbow graph
sns.set()
plt.plot(range(1,11), WCSS)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

"""Optimum Number of Clusters = 5

Training the K-Means Clustering Model
"""

Kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = Kmeans.fit_predict(X)

print(Y)

"""5 Clusters - 0, 1, 2, 3, 4

Visualizing all the clusters
"""

# plotting all the clusters and their centroids
plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(Kmeans.cluster_centers_[:,0], Kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')
plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()